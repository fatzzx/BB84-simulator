import { TranslationResources } from "../types";

export const en: TranslationResources = {
  app: {
    title: "BB84 Protocol Simulator",
    subtitle: "Interactive Quantum Cryptography Demonstration",
  },
  simulation: {
    title: "Simulation Settings",
    transmissions: "Number of Transmissions",
    errorRate: "Error Rate",
    speed: "Speed",
    reset: "üîÑ Reset",
    howToUse: "How to use:",
    instructions: {
      transmissions: "‚Ä¢ Transmissions: How many photons Alice will send to Bob",
      finalKey: "‚Ä¢ Final key: Result of transmissions with matching bases",
      errorRate: "‚Ä¢ Error Rate: Simulates eavesdropping (spy intercepting)",
      sameBases: "‚Ä¢ Same bases: Bits are kept in the final key",
      differentBases: "‚Ä¢ Different bases: Bits are discarded",
    },
  },
  controls: {
    step: "‚ñ∂Ô∏è Step",
    auto: "üîÑ Auto",
    pause: "‚è∏Ô∏è Pause",
    complete: "‚ö° Complete",
    stepTooltip: "Execute one step of the simulation",
    autoTooltip: "Run automatically at configured speed",
    pauseTooltip: "Pause automatic simulation",
    completeTooltip: "Execute entire simulation instantly",
  },
  status: {
    running: "üîÑ Running...",
    transmitting: "Transmitting...",
    complete: "‚úÖ Complete!",
    ready: "‚èπÔ∏è Ready",
  },
  characters: {
    alice: {
      name: "Alice",
      preparing: "Preparing Qubit",
      bit: "Bit:",
      base: "Base:",
      polarization: "Photon Polarization",
      quantumState: "Quantum State",
    },
    bob: {
      name: "Bob",
      measuring: "Measuring Qubit",
      base: "Base:",
      result: "Result:",
      detector: "Polarized Detector",
      quantumState: "Measured State",
      basesMatch: "Bases match",
      basesDifferent: "Different bases",
      bitIncluded: "Bit will be included in key",
      bitDiscarded: "Bit will be discarded",
    },
  },
  stepInfo: {
    transmissions: "Transmissions:",
    aliceBit: "Alice's Bit:",
    aliceBase: "Alice's Base:",
    bobBase: "Bob's Base:",
    basesMatch: "Bases match:",
    yes: "Yes",
    no: "No",
    bitPreserved: "Bit preserved:",
  },
  sharedKey: {
    title: "Shared Key",
    finalKey: "Final Key:",
    empty: "(Waiting for transmissions...)",
  },
  statistics: {
    bitsTransmitted: "Bits Transmitted",
    matchingBases: "Matching Bases",
    keyEfficiency: "Key Efficiency",
    errorRate: "Error Rate",
  },
  history: {
    title: "Step History",
    step: "Step",
    alice: "Alice",
    bob: "Bob",
    result: "Result",
    equal: "Equal",
    different: "Different",
    kept: "Kept",
    discarded: "Discarded",
    bit: "Bit:",
    base: "Base:",
    first: "‚§¥ First",
    previous: "‚Üê Previous",
    next: "Next ‚Üí",
    last: "‚§µ Last",
  },
  language: {
    toggle: "Change language",
    portuguese: "Portugu√™s",
    english: "English",
  },
};
